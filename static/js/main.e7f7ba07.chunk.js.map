{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e7f7ba07.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) =>\r\n{\r\n    return( //1 element lehet csak!\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>  //propsban megkapjuk a robotokat\r\n{\r\n    return(\r\n        <div>\r\n            {\r\n                robots.map((user,i) =>\r\n                {\r\n                return(\r\n                        <Card \r\n                            key={i} \r\n                            id={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email={robots[i].email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox =({searchField, searchChange})=>\r\n{\r\n    return(\r\n\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='search robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>\r\n{\r\n    return(\r\n        <div style={{overflowY: 'scroll', border:'1px solid black', height:'600px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = \r\n        {\r\n            hasError: false\r\n        };\r\n    }\r\n\r\n    componentDidCatch(error, info)\r\n    {\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render()\r\n    {\r\n        if(this.state.hasError)\r\n        {\r\n            return <h1>Oops. That is not good.</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => requestRobots(dispatch)\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(\r\n            robots => {\r\n                return robots.name.toLowerCase().includes(searchField.toLowerCase());\r\n            }\r\n        );\r\n\r\n        return isPending ?\r\n            <h1>Loading...</h1> :\r\n\r\n            (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboFriends</h1>\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCHFIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n}","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCHFIELD: return { ...state, searchField: action.payload };\r\n        default: return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false });\r\n        default: return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}